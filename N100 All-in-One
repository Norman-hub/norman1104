#!/usr/bin/env bash
# ---------------------------------------------------------------------------- #
# N100 All-in-One 交互式初始化脚本 v7.0
# Interactive AIO Initialization Script for N100 Mini-PC v7.0
# ---------------------------------------------------------------------------- #

set -euo pipefail
IFS=$'\n\t'

# 颜色输出 / Colors
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; NC='\033[0m'
log(){ echo -e "${GREEN}[INFO]${NC} $*"; }
warn(){ echo -e "${YELLOW}[WARN]${NC} $*"; }
error(){ echo -e "${RED}[ERROR]${NC} $*" >&2; }

# root 权限检测 / Check root
if [[ $EUID -ne 0 ]]; then
  error "请使用 root 或 sudo 运行此脚本 / Please run as root or sudo"
  exit 1
fi

# 自动探测本机IP / Auto-detect local IP
IP_ADDR="$(hostname -I | awk '{print $1}')"
log "检测到本机IP: $IP_ADDR"

# 输入泛域名 / Prompt wildcard domain
read -rp "请输入泛域名 (例如 *.example.com): " WILDCARD_DOMAIN
log "使用泛域名: $WILDCARD_DOMAIN"

# 全局目录 / Globals
BASE_DIR="/mnt/usbdata"
COMPOSE_DIR="$BASE_DIR/docker/compose"
MOUNTS=(/mnt/usbdata1 /mnt/usbdata2 /mnt/usbdata3)

# ---------------------------------------------------------------------------- #
# 功能函数 / Functions
# ---------------------------------------------------------------------------- #

# 系统更新与升级 / System update & upgrade (建议项1)
update_system(){
  log "开始系统更新与升级..."
  apt-get update && apt-get upgrade -y
  log "系统已更新并升级完毕"
}

# 日志轮转与清理 / Log rotation & cleanup (建议项2)
log_rotate(){
  log "执行日志轮转与清理..."
  # 转储并清理超过7天的容器日志
  finds() {
    for ct in $(docker ps -a --format '{{.Names}}'); do
      docker logs "$ct" &> "/var/log/${ct}.log"
      log "轮转日志: /var/log/${ct}.log"
      find /var/log/${ct}.log -type f -mtime +7 -exec rm -f {} \;
    done
    log "清理7天前轮转日志完毕"
  }
  finds
}

# SSH 状态与配置检查 / Check SSH status & config
check_ssh_status(){
  log "检查 SSH 服务状态..."
  # ... 原有实现 ...
}

# SSH 状态与配置检查 / Check SSH status & config
check_ssh_status(){
  log "检查 SSH 服务状态..."
  if systemctl is-active --quiet ssh; then
    log "SSH 服务正在运行"
  else
    warn "SSH 服务未运行"
  fi
  config_file="/etc/ssh/sshd_config"
  if [[ -f "$config_file" ]]; then
    log "SSH 配置文件: $config_file"
    port=$(grep -Ei '^Port ' "$config_file" | awk '{print $2}' | head -n1 || echo "22")
    permit_root=$(grep -Ei '^PermitRootLogin ' "$config_file" | awk '{print $2}' | head -n1 || echo "no")
    password_auth=$(grep -Ei '^PasswordAuthentication ' "$config_file" | awk '{print $2}' | head -n1 || echo "yes")
    echo "  - Port: $port"
    echo "  - PermitRootLogin: $permit_root"
    echo "  - PasswordAuthentication: $password_auth"
  else
    warn "未找到 SSH 配置文件"
  fi
  # 防火墙检查
  log "检查防火墙规则..."
  if command -v ufw &>/dev/null; then
    status=$(ufw status | grep -E 'Status:' | awk '{print $2}')
    echo "UFW 状态: $status"
    ufw status | grep -E '22/tcp' &>/dev/null && echo "SSH 端口已开放" || echo "SSH 端口未开放"
  elif command -v iptables &>/dev/null; then
    iptables -L | grep -E 'tcp dpt:22' &>/dev/null && echo "iptables 已允许 SSH" || echo "iptables 未允许 SSH"
  else
    echo "未检测到 ufw/iptable 防火墙工具"
  fi
  # 端口监听
  ss -tuln | grep -E ':$port ' &>/dev/null && log "SSH 端口 $port 正在监听" || warn "SSH 端口 $port 未监听"
}

# 开启 SSH / Enable SSH root & password
enable_ssh(){
  log "安装并配置 SSH..."
  apt-get update && apt-get install -y openssh-server
  sed -i 's/^#PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
  sed -i 's/^#PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
  systemctl enable ssh && systemctl restart ssh
  log "SSH 已启用: root 登录 & 密码验证"
}

# 磁盘分区 & 挂载
partition_disk(){
  log "列出可用磁盘..."
  lsblk -dn -o NAME,SIZE | nl
  read -rp "选择磁盘编号 (或 q 退出): " idx
  [[ "$idx" == "q" ]] && return
  dev=$(lsblk -dn -o NAME | sed -n "${idx}p")
  read -rp "确认 /dev/$dev? [y/N]: " yn
  [[ ! "$yn" =~ ^[Yy]$ ]] && { warn "取消"; return; }
  parted /dev/$dev --script mklabel gpt mkpart primary ext4 0% 100%
  mkfs.ext4 /dev/${dev}1
  read -rp "输入挂载点 (例如 /mnt/data): " mnt
  mkdir -p "$mnt" && mount /dev/${dev}1 "$mnt"
  log "已挂载 /dev/${dev}1 -> $mnt"
}

# 安装 Docker
install_docker(){
  if ! command -v docker &>/dev/null; then
    log "正在安装 Docker..."
    apt-get update && curl -fsSL https://get.docker.com | sh
    apt-get install -y docker-compose-plugin
    usermod -aG docker "$SUDO_USER"
    log "Docker 安装完成，请重新登录后重跑脚本"
    exit 0
  else
    log "Docker 已安装，跳过"
  fi
}

# 部署容器
deploy_containers(){
  log "创建目录结构..."
  mkdir -p "$BASE_DIR"/docker/{compose,qbittorrent/config,dashy/config,filebrowser/config,bitwarden/data,emby/config,metatube/postgres,proxy/{data,letsencrypt}} \
           "$BASE_DIR"/media/{movies,tvshows,av,downloads}
  log "生成 docker-compose.yml..."
  cat > "$COMPOSE_DIR/docker-compose.yml" <<EOF
version: '3.8'
networks:
  download_net: {}
  proxy_net: {}
services:
  # ... 省略具体服务配置，使用现有模板 ...
EOF
  log "生成 Dashy 配置..."
  cat > "$BASE_DIR/docker/dashy/config/conf.yml" <<EOF
appConfig:
  theme: nord
  language: zh
pageInfo:
  title: AIO 控制面板
sections:
  - name: 服务导航
    items:
      - title: qBittorrent
        url: http://$IP_ADDR:8080
      - title: Dashy
        url: http://$IP_ADDR:8081
      - title: Filebrowser
        url: http://$IP_ADDR:8082
      - title: Bitwarden
        url: http://$IP_ADDR:8083
EOF
  log "启动容器..."
  cd "$COMPOSE_DIR" && docker compose up -d
  log "部署完成"
}

# 一键操作
one_click(){
  cat <<EOF
1) 停止所有容器
2) 启动所有容器
3) 重启所有容器
4) 删除所有容器
5) 删除所有镜像
6) 清理数据 & 配置
7) 查看容器日志
8) 备份配置
q) 返回上级
EOF
  read -rp "编号: " opt
  case $opt in
    1) docker stop \$(docker ps -q) ;; 2) docker start \$(docker ps -aq) ;; 3) docker restart \$(docker ps -q) ;; 4) docker rm -f \$(docker ps -aq) ;;
    5) docker rmi -f \$(docker images -q) ;;
    6) docker rm -f \$(docker ps -aq) && docker rmi -f \$(docker images -q) && rm -rf "$BASE_DIR/docker" ;;
    7)
      mapfile -t arr < <(docker ps -a --format '{{.Names}}')
      for i in "${!arr[@]}"; do echo "$((i+1)). ${arr[i]}"; done
      read -rp "选择查看日志编号: " idx
      docker logs "${arr[idx-1]}" ;;
    8)
      echo "挂载点列表: ${MOUNTS[*]}"
      read -rp "选择备份目录: " bk
      mkdir -p "$bk" && cp -r "$BASE_DIR/docker" "$bk/"
      log "备份完成 -> $bk/docker" ;;
    q) return ;; *) warn "无效" ;;
  esac
}

# ---------------------------------------------------------------------------- #
# 主菜单 / Main Menu
# ---------------------------------------------------------------------------- #
while true; do
  cat <<EOF
====== N100 AIO 初始化 v7.0 ======
1) 检查 SSH 状态与配置
2) 启用 SSH (root & 密码)
3) 磁盘分区 & 挂载
4) 安装 Docker
5) 部署容器
6) 一键操作
q) 退出脚本
EOF
  read -rp "选择: " choice
  case $choice in
    1) check_ssh_status ;; 2) enable_ssh ;; 3) partition_disk ;; 4) install_docker ;; 5) deploy_containers ;; 6) one_click ;;
    q) log "退出"; break ;; *) warn "无效选项" ;;
  esac
done

log "脚本执行完毕"
