#!/usr/bin/env bash
# ---------------------------------------------------------------------------- #
# N100 小主机 All-in-One 初始化脚本 v5.0                                          #
# 功能：
#   1. 创建目录结构
#   2. 安装 Docker & Docker Compose 插件
#   3. 创建 Docker 网络
#   4. 生成并启动 docker-compose.yml
#   5. 写入 Dashy 配置（含 Glances 监控卡片）
#   6. 生成 Nginx Proxy Manager (NPM) 导入配置
#   7. 启动所有容器
#   8. qBittorrent 优化配置
#   9. PT/BT 切换脚本
# ---------------------------------------------------------------------------- #
set -euo pipefail
IFS=$'\n\t'

# === 以下两处请根据实际环境修改 ===
readonly BASE_DIR="/mnt/usbdata"          # 本地存储根目录，可改为你的挂载路径
readonly IP_ADDR="$(hostname -I | awk '{print $1}')"  # 本机 IP，用于 Dashy 和 NPM 配置
# ==================================

readonly COMPOSE_DIR="$BASE_DIR/docker/compose"
readonly COMPOSE_FILE="$COMPOSE_DIR/docker-compose.yml"
readonly NPM_IMPORT_DIR="$BASE_DIR/docker/proxy/import"

# 颜色输出
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; NC='\033[0m'

# 日志函数
log()   { echo -e "${GREEN}[INFO]${NC} $*"; }
warn()  { echo -e "${YELLOW}[WARN]${NC} $*"; }
error(){ echo -e "${RED}[ERROR]${NC} $*" >&2; }

# 检查权限
if [[ $EUID -ne 0 ]]; then
  error "请使用 root 或 sudo 权限运行此脚本"
  exit 1
fi

log "=== N100 小主机 All-in-One 初始化脚本 v5.0 ==="

# ---------------------------------------------------------------------------- #
# 1. 目录准备
# ---------------------------------------------------------------------------- #
log "创建目录结构：$BASE_DIR"
mkdir -p "$BASE_DIR"/{docker/{compose,proxy/import,qbittorrent/config,dashy/config,filebrowser/config,bitwarden/data,emby/config,metatube/postgres,proxy/{data,letsencrypt}},media/{movies,tvshows,av,downloads}}

# ---------------------------------------------------------------------------- #
# 2. 安装 Docker & Compose
# ---------------------------------------------------------------------------- #
if ! command -v docker &>/dev/null; then
  log "检测到 Docker 未安装，开始安装..."
  apt-get update
  curl -fsSL https://get.docker.com | sh
  log "安装 docker-compose 插件"
  apt-get install -y docker-compose-plugin
  usermod -aG docker "$SUDO_USER"
  warn "Docker 安装完成，请重新登录后重跑脚本。"
  exit 0
else
  log "Docker 已安装，跳过。"
fi

# ---------------------------------------------------------------------------- #
# 3. 创建 Docker 网络
# ---------------------------------------------------------------------------- #
for net in download_net proxy_net; do
  if ! docker network ls | grep -qw "$net"; then
    log "创建网络: $net"
    docker network create "$net"
  else
    log "网络已存在: $net"
  fi
done

# ---------------------------------------------------------------------------- #
# 4. 生成 docker-compose.yml
# ---------------------------------------------------------------------------- #
log "生成 $COMPOSE_FILE"
mkdir -p "$COMPOSE_DIR"
cat > "$COMPOSE_FILE" <<EOF
version: '3.8'
services:
  qbittorrentee:
    image: superng6/qbittorrentee
    container_name: qbittorrentee
    networks:
      - download_net
      - proxy_net
    labels:
      - "traefik.enable=false"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Shanghai
      - WEBUI_PORT=8080
      - ENABLE_DOWNLOADS_PERM_FIX=true
    volumes:
      - $BASE_DIR/docker/qbittorrent/config:/config
      - $BASE_DIR/media/downloads:/downloads
    ports:
      - '8080:8080'
      - '6881:6881'
      - '6881:6881/udp'
    restart: unless-stopped

  xunlei:
    image: cnk3x/xunlei
    container_name: xunlei
    networks:
      - download_net
      - proxy_net
    privileged: true
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Shanghai
    volumes:
      - $BASE_DIR/docker/xunlei:/xunlei
      - $BASE_DIR/media/downloads:/downloads
    ports:
      - '2345:2345'
    restart: unless-stopped

  dashy:
    image: lissy93/dashy:latest
    container_name: dashy
    networks:
      - proxy_net
    volumes:
      - $BASE_DIR/docker/dashy/config/conf.yml:/app/user-data/conf.yml
    ports:
      - '8081:8080'
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ['CMD','node','/app/services/healthcheck']
      interval: 90s
      timeout: 10s
      retries: 3

  glances:
    image: nicolargo/glances:latest
    container_name: glances
    network_mode: host      # 或使用 bridge + ports: ["61208:61208"]
    pid: host
    command: ["glances","-w","--enable-api","-B","0.0.0.0"]  # === 必改：开启 API 并绑定所有接口 ===
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    networks:
      - proxy_net
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - $BASE_DIR:/srv
      - $BASE_DIR/docker/filebrowser/config:/config
    ports:
      - '8082:80'
    restart: unless-stopped

  bitwarden:
    image: vaultwarden/server:latest
    container_name: bitwarden
    networks:
      - proxy_net
    volumes:
      - $BASE_DIR/docker/bitwarden/data:/data
    ports:
      - '8083:80'
    environment:
      - SIGNUPS_ALLOWED=true
      - ADMIN_TOKEN=YOUR_ADMIN_TOKEN  # === 必改：设置你自己的 ADMIN_TOKEN ===
    restart: unless-stopped

  emby:
    image: amilys/embyserver
    container_name: emby
    networks:
      - proxy_net
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Shanghai
    volumes:
      - $BASE_DIR/docker/emby/config:/config
      - $BASE_DIR/media:/mnt/media
    ports:
      - '8096:8096'
    restart: unless-stopped

  metatube-postgres:
    image: postgres:15-alpine
    container_name: metatube-postgres
    networks:
      - proxy_net
    environment:
      - POSTGRES_USER=metatube
      - POSTGRES_PASSWORD=metatube
      - POSTGRES_DB=metatube
    volumes:
      - $BASE_DIR/docker/metatube/postgres:/var/lib/postgresql/data
    command: ["-c","listen_addresses=''","-c","unix_socket_permissions=0777"]
    restart: unless-stopped

  metatube:
    image: ghcr.io/metatube-community/metatube-server:latest
    container_name: metatube
    networks:
      - proxy_net
    depends_on:
      - metatube-postgres
    environment:
      - HTTP_PROXY=
      - HTTPS_PROXY=
    volumes:
      - run:/var/run
    ports:
      - '9090:8080'
    command: ["-dsn","postgres://metatube:metatube@/metatube?host=/var/run/postgresql","-db-auto-migrate","-db-prepared-stmt"]
    restart: unless-stopped

  nginxproxymanager:
    image: chishin/nginx-proxy-manager-zh:release
    container_name: nginxproxymanager
    networks:
      - proxy_net
    volumes:
      - $BASE_DIR/docker/proxy/data:/data
      - $BASE_DIR/docker/proxy/letsencrypt:/etc/letsencrypt
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    restart: unless-stopped

networks:
  download_net: {}
  proxy_net: {}
volumes:
  run:
EOF

# ---------------------------------------------------------------------------- #
# 5. Dashy 配置（含 Glances 监控卡片）
# ---------------------------------------------------------------------------- #
log "生成 Dashy 配置至：$BASE_DIR/docker/dashy/config/conf.yml"
cat > "$BASE_DIR/docker/dashy/config/conf.yml" <<EOF
appConfig:
  theme: nord
  language: zh

pageInfo:
  title: 我的 AIO 控制面板
  description: 服务导航

sections:
  - name: 下载工具
    items:
      - title: qBittorrent
        url: http://$IP_ADDR:8080
        icon: fas fa-cloud-download-alt
      - title: 迅雷
        url: http://$IP_ADDR:2345
        icon: fas fa-bolt
  - name: 媒体服务
    items:
      - title: Emby
        url: http://$IP_ADDR:8096
        icon: fas fa-film
  - name: 管理面板
    items:
      - title: Dashy
        url: http://$IP_ADDR:8081
        icon: fas fa-th
      - title: Filebrowser
        url: http://$IP_ADDR:8082
        icon: fas fa-folder-open
      - title: Nginx Proxy Manager
        url: http://$IP_ADDR:81
        icon: fas fa-random
      - title: Bitwarden
        url: http://$IP_ADDR:8083
        icon: fas fa-key
  - name: 系统监控
    items:
      - title: CPU 使用率
        type: card
        options:
          data:
            source: http://$IP_ADDR:61208/api/3/all  # === 确保 API 可用 ===
            path: $.cpu.total
        style:
          icon: fas fa-microchip
          unit: '%'
          thresholds:
            - value: 50
            - value: 80
            - value: 100
      - title: 内存使用
        type: card
        options:
          data:
            source: http://$IP_ADDR:61208/api/3/all
            path: $.mem.percent
        style:
          icon: fas fa-memory
          unit: '%'
          thresholds:
            - value: 50
            - value: 80
            - value: 100
      - title: 磁盘根分区使用
        type: card
        options:
          data:
            source: http://$IP_ADDR:61208/api/3/all
            path: $.fs.mapPartitions[?(@.mountpoint=='/')].percent
        style:
          icon: fas fa-hdd
          unit: '%'
          thresholds:
            - value: 70
            - value: 90
            - value: 100
      - title: 各容器 CPU 占用
        type: miniGraph
        options:
          data:
            source: http://$IP_ADDR:61208/api/3/all
            path: $.docker.mapContainerStats[*].cpu_percent
        style:
          unit: '%'
          height: 100
      - title: Glances 全视图
        type: iframe
        url: http://$IP_ADDR:61208/  # === Iframe 查看完整 Glances UI ===
        icon: fas fa-chart-line
        height: 500
EOF

# ---------------------------------------------------------------------------- #
# 6. 生成 NPM 导入配置
# ---------------------------------------------------------------------------- #
log "生成 NPM 导入配置至：$NPM_IMPORT_DIR/services.json"
cat > "$NPM_IMPORT_DIR/services.json" <<EOF
[
  {
    "domain_names": ["qb.example.com"],  # === 必改：你的反代域名 ===
    "forward_scheme": "http",
    "forward_host": "$IP_ADDR",
    "forward_port": 8080,
    "enabled": true,
    "meta": {"letsencrypt": {"accept": true}}
  },
  {
    "domain_names": ["xl.example.com"],  # === 必改：你的反代域名 ===
    "forward_scheme": "http",
    "forward_host": "$IP_ADDR",
    "forward_port": 2345,
    "enabled": true
  },
  {
    "domain_names": ["dashy.example.com"],
    "forward_scheme": "http",
    "forward_host": "$IP_ADDR",
    "forward_port": 8081,
    "enabled": true
  },
  {
    "domain_names": ["glances.example.com"],
    "forward_scheme": "http",
    "forward_host": "$IP_ADDR",
    "forward_port": 61208,
    "enabled": true
  },
  {
    "domain_names": ["fb.example.com"],
    "forward_scheme": "http",
    "forward_host": "$IP_ADDR",
    "forward_port": 8082,
    "enabled": true
  },
  {
    "domain_names": ["bw.example.com"],
    "forward_scheme": "http",
    "forward_host": "$IP_ADDR",
    "forward_port": 8083,
    "enabled": true
  },
  {
    "domain_names": ["emby.example.com"],
    "forward_scheme": "http",
    "forward_host": "$IP_ADDR",
    "forward_port": 8096,
    "enabled": true
  },
  {
    "domain_names": ["mt.example.com"],
    "forward_scheme": "http",
    "forward_host": "$IP_ADDR",
    "forward_port": 9090,
    "enabled": true
  }
]
EOF

# ---------------------------------------------------------------------------- #
# 7. 启动所有容器
# ---------------------------------------------------------------------------- #
log "启动所有容器..."
cd "$COMPOSE_DIR"
docker compose up -d

# ---------------------------------------------------------------------------- #
# 8. qBittorrent 优化配置 移动宽带优化
# ---------------------------------------------------------------------------- #
echo "[调优] 配置 qBittorrent 适合移动宽带..."
QBIT_CONF="$BASE_DIR/docker/qbittorrent/config/qBittorrent.conf"
mkdir -p "$(dirname $QBIT_CONF)"
cat > $QBIT_CONF << EOF
[Preferences]
Connection\GlobalUPLimit=150        # 上传限速 150 KB/s
Connection\GlobalDLLimit=-1
Connection\MaxConnections=200
Connection\MaxConnectionsPerTorrent=60
Connection\MaxUploads=8
Connection\MaxUploadsPerTorrent=4
Downloads\SavePath=/downloads
Downloads\PreAllocation=true
Downloads\DiskWriteCacheSize=256
Queueing\MaxActiveDownloads=5
Queueing\MaxActiveTorrents=8
Queueing\MaxActiveUploads=5
Bittorrent\DHT=true
Bittorrent\PeX=true
Bittorrent\LSD=true
Bittorrent\uTP=true
Bittorrent\AnnounceToAllTrackers=true
WebUI\Port=8080
WebUI\Password_PBKDF2="@ByteArray(sha256加密后的默认密码)"
EOF
# ---------------------------------------------------------------------------- #
# 9. PT/BT 切换脚本
# ---------------------------------------------------------------------------- #
PT_SCRIPT="$BASE_DIR/docker/qbittorrent/config/switch-pt.sh"
cat > $PT_SCRIPT << 'EOF'
#!/bin/bash
CONF="/config/qBittorrent.conf"
if grep -q "Bittorrent\\\DHT=true" $CONF; then
  echo "[切换] 启用 PT 模式（禁用 DHT/PEX/uTP）"
  sed -i 's/Bittorrent\\\DHT=true/Bittorrent\\\DHT=false/' $CONF
  sed -i 's/Bittorrent\\\PeX=true/Bittorrent\\\PeX=false/' $CONF
  sed -i 's/Bittorrent\\\uTP=true/Bittorrent\\\uTP=false/' $CONF
else
  echo "[切换] 启用 BT 模式（恢复 DHT/PEX/uTP）"
  sed -i 's/Bittorrent\\\DHT=false/Bittorrent\\\DHT=true/' $CONF
  sed -i 's/Bittorrent\\\PeX=false/Bittorrent\\\PeX=true/' $CONF
  sed -i 's/Bittorrent\\\uTP=false/Bittorrent\\\uTP=true/' $CONF
fi
echo "[完成] 重启容器生效：docker restart qbittorrent"
EOF
chmod +x "$PT_SCRIPT"

log "脚本执行完毕！请根据标注处修改域名和 ADMIN_TOKEN 后重启相关服务。"
